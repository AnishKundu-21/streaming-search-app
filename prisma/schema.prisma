// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  password      String?         // for credentials provider
  accounts      Account[]
  sessions      Session[]
  watchlist     WatchlistItem[]
  watched       WatchedItem[]

  @@map("users")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Custom models for our streaming app
model WatchlistItem {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  contentId    Int
  mediaType    String // "movie" or "tv"
  seasonNumber Int      @default(0) // 0 for movies, >0 for seasons
  title        String
  posterPath   String?
  addedAt      DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, contentId, mediaType, seasonNumber])
  @@map("watchlist")
}

model WatchedItem {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  contentId    Int
  mediaType    String // "movie" or "tv"
  seasonNumber Int      @default(0) // 0 for movies, >0 for seasons
  title        String
  posterPath   String?
  watchedAt    DateTime @default(now())
  rating       Int? // optional 1-10 rating
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, contentId, mediaType, seasonNumber])
  @@map("watched")
}